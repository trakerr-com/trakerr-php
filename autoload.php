<?php

/**
 * Trakerr  Client API
 *
 * Get your application events and errors to Trakerr via the *Trakerr API*.
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An example of a project-specific implementation.
 *
 * After registering this autoload function with SPL, the following line
 * would cause the function to attempt to load the \trakerr\Baz\Qux class
 * from /path/to/project/lib/Baz/Qux.php:
 *
 *      new \trakerr\Baz\Qux;
 *
 * @param string $class The fully-qualified class name.
 *
 * @return void
 */
spl_autoload_register(function ($class) {
    // project-specific namespace prefix
    $relative_class_name = getRelativeClassName($class, 'trakerr\\client');

    if(!is_null($relative_class_name)) {

        // base directory for the namespace prefix
        $base_dir = __DIR__ . '/generated/SwaggerClient-php/lib/';
    } else {
        $relative_class_name = getRelativeClassName($class, 'trakerr\\');

        // move to the next registered autoloader
        if(!$relative_class_name) { return; }

        // base directory for the namespace prefix
        $base_dir = __DIR__ . '/lib/';
    }

    // replace the namespace prefix with the base directory, replace namespace
    // separators with directory separators in the relative class name, append
    // with .php
    $file = $base_dir . str_replace('\\', '/', $relative_class_name) . '.php';

    // if the file exists, require it
    if (file_exists($file)) {
        require $file;
    }
});

function getRelativeClassName($class, $prefix) {

    // does the class use the namespace prefix?
    $len = strlen($prefix);
    if (strncmp($prefix, $class, $len) !== 0) {
        return null;
    }

    // get the relative class name
    $relative_class = substr($class, $len);

    return $relative_class;
}
