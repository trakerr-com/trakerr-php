<?php
/**
 * AppEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  trakerr\client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Trakerr API
 *
 * Get your application events and errors to Trakerr via the *Trakerr API*.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace trakerr\client\model;

use \ArrayAccess;

/**
 * AppEvent Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     trakerr\client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AppEvent implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AppEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'api_key' => 'string',
        'log_level' => 'string',
        'classification' => 'string',
        'event_type' => 'string',
        'event_message' => 'string',
        'event_time' => 'int',
        'event_stacktrace' => '\trakerr\client\model\Stacktrace',
        'event_user' => 'string',
        'event_session' => 'string',
        'context_app_version' => 'string',
        'deployment_stage' => 'string',
        'context_env_name' => 'string',
        'context_env_language' => 'string',
        'context_env_version' => 'string',
        'context_env_hostname' => 'string',
        'context_app_browser' => 'string',
        'context_app_browser_version' => 'string',
        'context_app_os' => 'string',
        'context_app_os_version' => 'string',
        'context_data_center' => 'string',
        'context_data_center_region' => 'string',
        'context_tags' => 'string[]',
        'context_url' => 'string',
        'context_operation_time_millis' => 'int',
        'context_cpu_percentage' => 'int',
        'context_memory_percentage' => 'int',
        'context_cross_app_correlation_id' => 'string',
        'context_device' => 'string',
        'context_app_sku' => 'string',
        'custom_properties' => '\trakerr\client\model\CustomData',
        'custom_segments' => '\trakerr\client\model\CustomData'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'api_key' => 'apiKey',
        'log_level' => 'logLevel',
        'classification' => 'classification',
        'event_type' => 'eventType',
        'event_message' => 'eventMessage',
        'event_time' => 'eventTime',
        'event_stacktrace' => 'eventStacktrace',
        'event_user' => 'eventUser',
        'event_session' => 'eventSession',
        'context_app_version' => 'contextAppVersion',
        'deployment_stage' => 'deploymentStage',
        'context_env_name' => 'contextEnvName',
        'context_env_language' => 'contextEnvLanguage',
        'context_env_version' => 'contextEnvVersion',
        'context_env_hostname' => 'contextEnvHostname',
        'context_app_browser' => 'contextAppBrowser',
        'context_app_browser_version' => 'contextAppBrowserVersion',
        'context_app_os' => 'contextAppOS',
        'context_app_os_version' => 'contextAppOSVersion',
        'context_data_center' => 'contextDataCenter',
        'context_data_center_region' => 'contextDataCenterRegion',
        'context_tags' => 'contextTags',
        'context_url' => 'contextURL',
        'context_operation_time_millis' => 'contextOperationTimeMillis',
        'context_cpu_percentage' => 'contextCpuPercentage',
        'context_memory_percentage' => 'contextMemoryPercentage',
        'context_cross_app_correlation_id' => 'contextCrossAppCorrelationId',
        'context_device' => 'contextDevice',
        'context_app_sku' => 'contextAppSku',
        'custom_properties' => 'customProperties',
        'custom_segments' => 'customSegments'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'api_key' => 'setApiKey',
        'log_level' => 'setLogLevel',
        'classification' => 'setClassification',
        'event_type' => 'setEventType',
        'event_message' => 'setEventMessage',
        'event_time' => 'setEventTime',
        'event_stacktrace' => 'setEventStacktrace',
        'event_user' => 'setEventUser',
        'event_session' => 'setEventSession',
        'context_app_version' => 'setContextAppVersion',
        'deployment_stage' => 'setDeploymentStage',
        'context_env_name' => 'setContextEnvName',
        'context_env_language' => 'setContextEnvLanguage',
        'context_env_version' => 'setContextEnvVersion',
        'context_env_hostname' => 'setContextEnvHostname',
        'context_app_browser' => 'setContextAppBrowser',
        'context_app_browser_version' => 'setContextAppBrowserVersion',
        'context_app_os' => 'setContextAppOs',
        'context_app_os_version' => 'setContextAppOsVersion',
        'context_data_center' => 'setContextDataCenter',
        'context_data_center_region' => 'setContextDataCenterRegion',
        'context_tags' => 'setContextTags',
        'context_url' => 'setContextUrl',
        'context_operation_time_millis' => 'setContextOperationTimeMillis',
        'context_cpu_percentage' => 'setContextCpuPercentage',
        'context_memory_percentage' => 'setContextMemoryPercentage',
        'context_cross_app_correlation_id' => 'setContextCrossAppCorrelationId',
        'context_device' => 'setContextDevice',
        'context_app_sku' => 'setContextAppSku',
        'custom_properties' => 'setCustomProperties',
        'custom_segments' => 'setCustomSegments'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'api_key' => 'getApiKey',
        'log_level' => 'getLogLevel',
        'classification' => 'getClassification',
        'event_type' => 'getEventType',
        'event_message' => 'getEventMessage',
        'event_time' => 'getEventTime',
        'event_stacktrace' => 'getEventStacktrace',
        'event_user' => 'getEventUser',
        'event_session' => 'getEventSession',
        'context_app_version' => 'getContextAppVersion',
        'deployment_stage' => 'getDeploymentStage',
        'context_env_name' => 'getContextEnvName',
        'context_env_language' => 'getContextEnvLanguage',
        'context_env_version' => 'getContextEnvVersion',
        'context_env_hostname' => 'getContextEnvHostname',
        'context_app_browser' => 'getContextAppBrowser',
        'context_app_browser_version' => 'getContextAppBrowserVersion',
        'context_app_os' => 'getContextAppOs',
        'context_app_os_version' => 'getContextAppOsVersion',
        'context_data_center' => 'getContextDataCenter',
        'context_data_center_region' => 'getContextDataCenterRegion',
        'context_tags' => 'getContextTags',
        'context_url' => 'getContextUrl',
        'context_operation_time_millis' => 'getContextOperationTimeMillis',
        'context_cpu_percentage' => 'getContextCpuPercentage',
        'context_memory_percentage' => 'getContextMemoryPercentage',
        'context_cross_app_correlation_id' => 'getContextCrossAppCorrelationId',
        'context_device' => 'getContextDevice',
        'context_app_sku' => 'getContextAppSku',
        'custom_properties' => 'getCustomProperties',
        'custom_segments' => 'getCustomSegments'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const LOG_LEVEL_DEBUG = 'debug';
    const LOG_LEVEL_INFO = 'info';
    const LOG_LEVEL_WARNING = 'warning';
    const LOG_LEVEL_ERROR = 'error';
    const LOG_LEVEL_FATAL = 'fatal';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLogLevelAllowableValues()
    {
        return [
            self::LOG_LEVEL_DEBUG,
            self::LOG_LEVEL_INFO,
            self::LOG_LEVEL_WARNING,
            self::LOG_LEVEL_ERROR,
            self::LOG_LEVEL_FATAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_key'] = isset($data['api_key']) ? $data['api_key'] : null;
        $this->container['log_level'] = isset($data['log_level']) ? $data['log_level'] : null;
        $this->container['classification'] = isset($data['classification']) ? $data['classification'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['event_message'] = isset($data['event_message']) ? $data['event_message'] : null;
        $this->container['event_time'] = isset($data['event_time']) ? $data['event_time'] : null;
        $this->container['event_stacktrace'] = isset($data['event_stacktrace']) ? $data['event_stacktrace'] : null;
        $this->container['event_user'] = isset($data['event_user']) ? $data['event_user'] : null;
        $this->container['event_session'] = isset($data['event_session']) ? $data['event_session'] : null;
        $this->container['context_app_version'] = isset($data['context_app_version']) ? $data['context_app_version'] : null;
        $this->container['deployment_stage'] = isset($data['deployment_stage']) ? $data['deployment_stage'] : null;
        $this->container['context_env_name'] = isset($data['context_env_name']) ? $data['context_env_name'] : null;
        $this->container['context_env_language'] = isset($data['context_env_language']) ? $data['context_env_language'] : null;
        $this->container['context_env_version'] = isset($data['context_env_version']) ? $data['context_env_version'] : null;
        $this->container['context_env_hostname'] = isset($data['context_env_hostname']) ? $data['context_env_hostname'] : null;
        $this->container['context_app_browser'] = isset($data['context_app_browser']) ? $data['context_app_browser'] : null;
        $this->container['context_app_browser_version'] = isset($data['context_app_browser_version']) ? $data['context_app_browser_version'] : null;
        $this->container['context_app_os'] = isset($data['context_app_os']) ? $data['context_app_os'] : null;
        $this->container['context_app_os_version'] = isset($data['context_app_os_version']) ? $data['context_app_os_version'] : null;
        $this->container['context_data_center'] = isset($data['context_data_center']) ? $data['context_data_center'] : null;
        $this->container['context_data_center_region'] = isset($data['context_data_center_region']) ? $data['context_data_center_region'] : null;
        $this->container['context_tags'] = isset($data['context_tags']) ? $data['context_tags'] : null;
        $this->container['context_url'] = isset($data['context_url']) ? $data['context_url'] : null;
        $this->container['context_operation_time_millis'] = isset($data['context_operation_time_millis']) ? $data['context_operation_time_millis'] : null;
        $this->container['context_cpu_percentage'] = isset($data['context_cpu_percentage']) ? $data['context_cpu_percentage'] : null;
        $this->container['context_memory_percentage'] = isset($data['context_memory_percentage']) ? $data['context_memory_percentage'] : null;
        $this->container['context_cross_app_correlation_id'] = isset($data['context_cross_app_correlation_id']) ? $data['context_cross_app_correlation_id'] : null;
        $this->container['context_device'] = isset($data['context_device']) ? $data['context_device'] : null;
        $this->container['context_app_sku'] = isset($data['context_app_sku']) ? $data['context_app_sku'] : null;
        $this->container['custom_properties'] = isset($data['custom_properties']) ? $data['custom_properties'] : null;
        $this->container['custom_segments'] = isset($data['custom_segments']) ? $data['custom_segments'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['api_key'] === null) {
            $invalid_properties[] = "'api_key' can't be null";
        }
        $allowed_values = array("debug", "info", "warning", "error", "fatal");
        if (!in_array($this->container['log_level'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'log_level', must be one of #{allowed_values}.";
        }

        if ($this->container['classification'] === null) {
            $invalid_properties[] = "'classification' can't be null";
        }
        if ($this->container['event_type'] === null) {
            $invalid_properties[] = "'event_type' can't be null";
        }
        if ($this->container['event_message'] === null) {
            $invalid_properties[] = "'event_message' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['api_key'] === null) {
            return false;
        }
        $allowed_values = array("debug", "info", "warning", "error", "fatal");
        if (!in_array($this->container['log_level'], $allowed_values)) {
            return false;
        }
        if ($this->container['classification'] === null) {
            return false;
        }
        if ($this->container['event_type'] === null) {
            return false;
        }
        if ($this->container['event_message'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets api_key
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     * @param string $api_key API key generated for the application
     * @return $this
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets log_level
     * @return string
     */
    public function getLogLevel()
    {
        return $this->container['log_level'];
    }

    /**
     * Sets log_level
     * @param string $log_level (optional) Logging level, one of 'debug','info','warning','error', 'fatal', defaults to 'error'
     * @return $this
     */
    public function setLogLevel($log_level)
    {
        $allowed_values = array('debug', 'info', 'warning', 'error', 'fatal');
        if (!in_array($log_level, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'log_level', must be one of 'debug', 'info', 'warning', 'error', 'fatal'");
        }
        $this->container['log_level'] = $log_level;

        return $this;
    }

    /**
     * Gets classification
     * @return string
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     * @param string $classification (optional) one of 'issue' or a custom string for non-issues, defaults to 'issue'
     * @return $this
     */
    public function setClassification($classification)
    {
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets event_type
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     * @param string $event_type type of the event or error (eg. NullPointerException)
     * @return $this
     */
    public function setEventType($event_type)
    {
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets event_message
     * @return string
     */
    public function getEventMessage()
    {
        return $this->container['event_message'];
    }

    /**
     * Sets event_message
     * @param string $event_message message containing details of the event or error
     * @return $this
     */
    public function setEventMessage($event_message)
    {
        $this->container['event_message'] = $event_message;

        return $this;
    }

    /**
     * Gets event_time
     * @return int
     */
    public function getEventTime()
    {
        return $this->container['event_time'];
    }

    /**
     * Sets event_time
     * @param int $event_time (optional) event time in ms since epoch
     * @return $this
     */
    public function setEventTime($event_time)
    {
        $this->container['event_time'] = $event_time;

        return $this;
    }

    /**
     * Gets event_stacktrace
     * @return \trakerr\client\model\Stacktrace
     */
    public function getEventStacktrace()
    {
        return $this->container['event_stacktrace'];
    }

    /**
     * Sets event_stacktrace
     * @param \trakerr\client\model\Stacktrace $event_stacktrace
     * @return $this
     */
    public function setEventStacktrace($event_stacktrace)
    {
        $this->container['event_stacktrace'] = $event_stacktrace;

        return $this;
    }

    /**
     * Gets event_user
     * @return string
     */
    public function getEventUser()
    {
        return $this->container['event_user'];
    }

    /**
     * Sets event_user
     * @param string $event_user (optional) event user identifying a user
     * @return $this
     */
    public function setEventUser($event_user)
    {
        $this->container['event_user'] = $event_user;

        return $this;
    }

    /**
     * Gets event_session
     * @return string
     */
    public function getEventSession()
    {
        return $this->container['event_session'];
    }

    /**
     * Sets event_session
     * @param string $event_session (optional) session identification
     * @return $this
     */
    public function setEventSession($event_session)
    {
        $this->container['event_session'] = $event_session;

        return $this;
    }

    /**
     * Gets context_app_version
     * @return string
     */
    public function getContextAppVersion()
    {
        return $this->container['context_app_version'];
    }

    /**
     * Sets context_app_version
     * @param string $context_app_version (optional) application version information
     * @return $this
     */
    public function setContextAppVersion($context_app_version)
    {
        $this->container['context_app_version'] = $context_app_version;

        return $this;
    }

    /**
     * Gets deployment_stage
     * @return string
     */
    public function getDeploymentStage()
    {
        return $this->container['deployment_stage'];
    }

    /**
     * Sets deployment_stage
     * @param string $deployment_stage (optional) deployment stage, one of 'development','staging','production' or a custom string
     * @return $this
     */
    public function setDeploymentStage($deployment_stage)
    {
        $this->container['deployment_stage'] = $deployment_stage;

        return $this;
    }

    /**
     * Gets context_env_name
     * @return string
     */
    public function getContextEnvName()
    {
        return $this->container['context_env_name'];
    }

    /**
     * Sets context_env_name
     * @param string $context_env_name (optional) environment name (like 'cpython' or 'ironpython' etc.)
     * @return $this
     */
    public function setContextEnvName($context_env_name)
    {
        $this->container['context_env_name'] = $context_env_name;

        return $this;
    }

    /**
     * Gets context_env_language
     * @return string
     */
    public function getContextEnvLanguage()
    {
        return $this->container['context_env_language'];
    }

    /**
     * Sets context_env_language
     * @param string $context_env_language (optional) language (like 'python' or 'c#' etc.)
     * @return $this
     */
    public function setContextEnvLanguage($context_env_language)
    {
        $this->container['context_env_language'] = $context_env_language;

        return $this;
    }

    /**
     * Gets context_env_version
     * @return string
     */
    public function getContextEnvVersion()
    {
        return $this->container['context_env_version'];
    }

    /**
     * Sets context_env_version
     * @param string $context_env_version (optional) version of environment
     * @return $this
     */
    public function setContextEnvVersion($context_env_version)
    {
        $this->container['context_env_version'] = $context_env_version;

        return $this;
    }

    /**
     * Gets context_env_hostname
     * @return string
     */
    public function getContextEnvHostname()
    {
        return $this->container['context_env_hostname'];
    }

    /**
     * Sets context_env_hostname
     * @param string $context_env_hostname (optional) hostname or ID of environment
     * @return $this
     */
    public function setContextEnvHostname($context_env_hostname)
    {
        $this->container['context_env_hostname'] = $context_env_hostname;

        return $this;
    }

    /**
     * Gets context_app_browser
     * @return string
     */
    public function getContextAppBrowser()
    {
        return $this->container['context_app_browser'];
    }

    /**
     * Sets context_app_browser
     * @param string $context_app_browser (optional) browser name if running in a browser (eg. Chrome)
     * @return $this
     */
    public function setContextAppBrowser($context_app_browser)
    {
        $this->container['context_app_browser'] = $context_app_browser;

        return $this;
    }

    /**
     * Gets context_app_browser_version
     * @return string
     */
    public function getContextAppBrowserVersion()
    {
        return $this->container['context_app_browser_version'];
    }

    /**
     * Sets context_app_browser_version
     * @param string $context_app_browser_version (optional) browser version if running in a browser
     * @return $this
     */
    public function setContextAppBrowserVersion($context_app_browser_version)
    {
        $this->container['context_app_browser_version'] = $context_app_browser_version;

        return $this;
    }

    /**
     * Gets context_app_os
     * @return string
     */
    public function getContextAppOs()
    {
        return $this->container['context_app_os'];
    }

    /**
     * Sets context_app_os
     * @param string $context_app_os (optional) OS the application is running on
     * @return $this
     */
    public function setContextAppOs($context_app_os)
    {
        $this->container['context_app_os'] = $context_app_os;

        return $this;
    }

    /**
     * Gets context_app_os_version
     * @return string
     */
    public function getContextAppOsVersion()
    {
        return $this->container['context_app_os_version'];
    }

    /**
     * Sets context_app_os_version
     * @param string $context_app_os_version (optional) OS version the application is running on
     * @return $this
     */
    public function setContextAppOsVersion($context_app_os_version)
    {
        $this->container['context_app_os_version'] = $context_app_os_version;

        return $this;
    }

    /**
     * Gets context_data_center
     * @return string
     */
    public function getContextDataCenter()
    {
        return $this->container['context_data_center'];
    }

    /**
     * Sets context_data_center
     * @param string $context_data_center (optional) Data center the application is running on or connected to
     * @return $this
     */
    public function setContextDataCenter($context_data_center)
    {
        $this->container['context_data_center'] = $context_data_center;

        return $this;
    }

    /**
     * Gets context_data_center_region
     * @return string
     */
    public function getContextDataCenterRegion()
    {
        return $this->container['context_data_center_region'];
    }

    /**
     * Sets context_data_center_region
     * @param string $context_data_center_region (optional) Data center region
     * @return $this
     */
    public function setContextDataCenterRegion($context_data_center_region)
    {
        $this->container['context_data_center_region'] = $context_data_center_region;

        return $this;
    }

    /**
     * Gets context_tags
     * @return string[]
     */
    public function getContextTags()
    {
        return $this->container['context_tags'];
    }

    /**
     * Sets context_tags
     * @param string[] $context_tags
     * @return $this
     */
    public function setContextTags($context_tags)
    {
        $this->container['context_tags'] = $context_tags;

        return $this;
    }

    /**
     * Gets context_url
     * @return string
     */
    public function getContextUrl()
    {
        return $this->container['context_url'];
    }

    /**
     * Sets context_url
     * @param string $context_url (optional) The full URL when running in a browser when the event was generated.
     * @return $this
     */
    public function setContextUrl($context_url)
    {
        $this->container['context_url'] = $context_url;

        return $this;
    }

    /**
     * Gets context_operation_time_millis
     * @return int
     */
    public function getContextOperationTimeMillis()
    {
        return $this->container['context_operation_time_millis'];
    }

    /**
     * Sets context_operation_time_millis
     * @param int $context_operation_time_millis (optional) duration that this event took to occur in millis. Example - database call time in millis.
     * @return $this
     */
    public function setContextOperationTimeMillis($context_operation_time_millis)
    {
        $this->container['context_operation_time_millis'] = $context_operation_time_millis;

        return $this;
    }

    /**
     * Gets context_cpu_percentage
     * @return int
     */
    public function getContextCpuPercentage()
    {
        return $this->container['context_cpu_percentage'];
    }

    /**
     * Sets context_cpu_percentage
     * @param int $context_cpu_percentage (optional) CPU utilization as a percent when event occured
     * @return $this
     */
    public function setContextCpuPercentage($context_cpu_percentage)
    {
        $this->container['context_cpu_percentage'] = $context_cpu_percentage;

        return $this;
    }

    /**
     * Gets context_memory_percentage
     * @return int
     */
    public function getContextMemoryPercentage()
    {
        return $this->container['context_memory_percentage'];
    }

    /**
     * Sets context_memory_percentage
     * @param int $context_memory_percentage (optional) Memory utilization as a percent when event occured
     * @return $this
     */
    public function setContextMemoryPercentage($context_memory_percentage)
    {
        $this->container['context_memory_percentage'] = $context_memory_percentage;

        return $this;
    }

    /**
     * Gets context_cross_app_correlation_id
     * @return string
     */
    public function getContextCrossAppCorrelationId()
    {
        return $this->container['context_cross_app_correlation_id'];
    }

    /**
     * Sets context_cross_app_correlation_id
     * @param string $context_cross_app_correlation_id (optional) Cross application correlation ID
     * @return $this
     */
    public function setContextCrossAppCorrelationId($context_cross_app_correlation_id)
    {
        $this->container['context_cross_app_correlation_id'] = $context_cross_app_correlation_id;

        return $this;
    }

    /**
     * Gets context_device
     * @return string
     */
    public function getContextDevice()
    {
        return $this->container['context_device'];
    }

    /**
     * Sets context_device
     * @param string $context_device (optional) Device information
     * @return $this
     */
    public function setContextDevice($context_device)
    {
        $this->container['context_device'] = $context_device;

        return $this;
    }

    /**
     * Gets context_app_sku
     * @return string
     */
    public function getContextAppSku()
    {
        return $this->container['context_app_sku'];
    }

    /**
     * Sets context_app_sku
     * @param string $context_app_sku (optional) Application SKU
     * @return $this
     */
    public function setContextAppSku($context_app_sku)
    {
        $this->container['context_app_sku'] = $context_app_sku;

        return $this;
    }

    /**
     * Gets custom_properties
     * @return \trakerr\client\model\CustomData
     */
    public function getCustomProperties()
    {
        return $this->container['custom_properties'];
    }

    /**
     * Sets custom_properties
     * @param \trakerr\client\model\CustomData $custom_properties
     * @return $this
     */
    public function setCustomProperties($custom_properties)
    {
        $this->container['custom_properties'] = $custom_properties;

        return $this;
    }

    /**
     * Gets custom_segments
     * @return \trakerr\client\model\CustomData
     */
    public function getCustomSegments()
    {
        return $this->container['custom_segments'];
    }

    /**
     * Sets custom_segments
     * @param \trakerr\client\model\CustomData $custom_segments
     * @return $this
     */
    public function setCustomSegments($custom_segments)
    {
        $this->container['custom_segments'] = $custom_segments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\trakerr\client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\trakerr\client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


